buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
		classpath "com.guardsquare:proguard-gradle:7.2.0-beta2"
    }
}

plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
}

repositories {
    flatDir {
        dirs "${project.g4mespeed_path}/build/libs"
    }
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version + "-mc" + project.minecraft_version
group = project.maven_group

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	
	modImplementation ":g4mespeed:${project.g4mespeed_core_version}:mc${project.minecraft_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	// modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.mod_version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	
	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 16
}

def outputJarName = jar.archiveName.with { it.take(it.lastIndexOf(".")) }
def obfuscatedFileName = "${outputJarName}-release.jar"

task obfuscateJar(type: proguard.gradle.ProGuardTask) {
	configuration "proguard.txt"
	
	// Some good info here: http://www.dre.vanderbilt.edu/~schmidt/android/android-4.0/external/proguard/docs/manual/refcard.html

	injars "${project.g4mespeed_path}/build/libs/g4mespeed-${project.g4mespeed_core_version}-mc${project.minecraft_version}.jar"
	outjars "./build/libs/unused.jar"

	applymapping "${project.g4mespeed_path}/g4mespeed-mappings-mc${project.minecraft_version}.map"

	obfuscationdictionary "member_obfuscation_dictionary.txt"

	injars "./build/libs/${jar.archiveName}" 
	outjars "./build/libs/${obfuscatedFileName}"
	
	// Automatically handle the Java version of this build.
	if (System.getProperty('java.version').startsWith('1.')) {
		// Before Java 9, the runtime classes were packaged in a single jar file.
		libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
	} else {
		// As of Java 9, the runtime classes are packaged in modular jmod files.
		libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
		libraryjars "${System.getProperty('java.home')}/jmods/java.sql.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
		//libraryjars "${System.getProperty('java.home')}/jmods/....."
	}
}

jar {
	from "LICENSE"
}
